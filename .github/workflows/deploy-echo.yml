name: Deploy Echo

on:
  push:
    branches:
      - main
    paths:
      #- 'ignore'

permissions:
  id-token: write
  contents: read

env:
  ECR_REPOSITORY: echo
  ECS_SERVICE: echo
  ECS_CLUSTER: echo
  ECS_TASK_DEFINITION: environment/aws/ecs_echo_task_definition.json
  CODEDEPLOY_APPSPEC: environment/aws/code_deploy_echo_appspec.yml
  CONTAINER_NAME: echo

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: PRODUCTION
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for China region audience
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }} 
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      
      - name: Get the Amazon Repository URI
        id: get-repository-uri
        run: |
          echo "::set-output name=repository_uri::$(aws ssm get-parameter --name /echo/ecr --query 'Parameter.Value' --output text)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f ./environment/docker/echo/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      
      - name: environment value from ssm parameter store
        id: get-ssm-parameter
        run: |
          echo "DB_HOST=$(aws ssm get-parameter --name /db/host --query 'Parameter.Value' --output text)" >> $GITHUB_OUTPUT
          echo "DB_NAME=$(aws ssm get-parameter --name /db/name --query 'Parameter.Value' --output text)" >> $GITHUB_OUTPUT
          echo "DB_PORT=$(aws ssm get-parameter --name /db/port --query 'Parameter.Value' --output text)" >> $GITHUB_OUTPUT
          echo "DB_USER=$(aws ssm get-parameter --name /db/user --query 'Parameter.Value' --output text)" >> $GITHUB_OUTPUT
          echo "DB_PASSWORD=$(aws ssm get-parameter --name /db/password --query 'Parameter.Value' --output text)" >> $GITHUB_OUTPUT
          echo "LOG_GROUP_NAME=$(aws ssm get-parameter --name /echo/log_group_name --query 'Parameter.Value' --output text)" >> $GITHUB_OUTPUT
          echo "execution_role_arn=$(aws ssm get-parameter --name /echo/execution_role_arn --query 'Parameter.Value' --output text)" >> $GITHUB_OUTPUT
          echo "task_role_arn=$(aws ssm get-parameter --name /echo/task_role_arn --query 'Parameter.Value' --output text)" >> $GITHUB_OUTPUT
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        run: |
          sed -i \
              -e 's|${execution_role_arn}|${{ steps.get-ssm-parameter.outputs.execution_role_arn }}|g' \
              -e 's|${task_role_arn}|${{ steps.get-ssm-parameter.outputs.task_role_arn }}|g' \
              -e 's|${db_user}|${{ steps.get-ssm-parameter.outputs.DB_USER }}|g' \
              -e 's|${db_password}|${{ steps.get-ssm-parameter.outputs.DB_PASSWORD }}|g' \
              ${{ env.ECS_TASK_DEFINITION }}

      - run: cat ${{ env.ECS_TASK_DEFINITION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            DB_HOST=${{ steps.get-ssm-parameter.outputs.DB_HOST }}
            DB_NAME=${{ steps.get-ssm-parameter.outputs.DB_NAME }}
            DB_PORT=${{ steps.get-ssm-parameter.outputs.DB_PORT }}
          log-configuration-options: |
            awslogs-group=${{ steps.get-ssm-parameter.outputs.LOG_GROUP_NAME }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}

          codedeploy-appspec: ${{ env.CODEDEPLOY_APPSPEC }}
          codedeploy-application: echo
          codedeploy-deployment-group: echo

          wait-for-service-stability: true
